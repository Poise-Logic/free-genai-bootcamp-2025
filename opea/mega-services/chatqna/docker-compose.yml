services:
  redis-vector-db:
    image: redis/redis-stack:7.2.0-v9
    container_name: redis-vector-db
    ports:
      - "${REDIS_PORT:-6379}:6379"
      - "8001:8001"
#    volumes:
#      - "redis_data:/data" # Adding data persistence
    networks:
      - opea-network
  dataprep-redis-service:
    image: "${REGISTRY:-opea}/dataprep:${TAG:-latest}"
    container_name: dataprep-redis-server
    depends_on:
      - redis-vector-db
      - tei-embedding-service
    ports:
      - "${DATAPREP_SERVICE_PORT:-6007}:5000"
    environment:
      no_proxy: "${no_proxy}"
      http_proxy: "${http_proxy}"
      https_proxy: "${https_proxy}"
      REDIS_URL: "redis://redis-vector-db:${REDIS_PORT:-6379}"
      REDIS_HOST: redis-vector-db
      INDEX_NAME: "${INDEX_NAME}"
      TEI_ENDPOINT: http://tei-embedding-service:80
      HUGGINGFACEHUB_API_TOKEN: "${HUGGINGFACEHUB_API_TOKEN}"
    networks:
      - opea-network
  tei-embedding-service:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.6
#    image: ghcr.io/huggingface/text-embeddings-inference:cpu-latest
    container_name: tei-embedding-server
    ports:
      - "${EMBEDDING_SERVER_PORT:-6006}:80"
    volumes:
      - "./tei_data:/data"
    shm_size: 1g
    environment:
      no_proxy: "${no_proxy}"
      http_proxy: "${http_proxy}"
      https_proxy: "${https_proxy}"
    command: --model-id "${EMBEDDING_MODEL_ID}" --auto-truncate
    networks:
      - opea-network
  retriever:
    image: "${REGISTRY:-opea}/retriever:${TAG:-latest}"
    container_name: retriever-redis-server
    depends_on:
      - redis-vector-db
    ports:
      - "${RETRIEVER_SERVICE_PORT:-7000}:7000"
    ipc: host
    environment:
      no_proxy: "${no_proxy}"
      http_proxy: "${http_proxy}"
      https_proxy: "${https_proxy}"
      REDIS_URL: "redis://redis-vector-db:${REDIS_PORT:-6379}"
      REDIS_HOST: redis-vector-db
      INDEX_NAME: "${INDEX_NAME}"
      TEI_EMBEDDING_ENDPOINT: http://tei-embedding-service:80
      HUGGINGFACEHUB_API_TOKEN: "${HUGGINGFACEHUB_API_TOKEN}"
      LOGFLAG: "${LOGFLAG}"
      RETRIEVER_COMPONENT_NAME: "OPEA_RETRIEVER_REDIS"
    restart: unless-stopped
    networks:
      - opea-network
#  tei-reranking-service:
#    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.6
#    container_name: tei-reranking-server
#    ports:
#      - "8808:80" # Using a fixed port as another TEI service might use the configured one [9, 10]
#    volumes:
#      - "./data:/data"
#    shm_size: 1g
#    environment:
#      no_proxy: "${no_proxy}"
#      http_proxy: "${http_proxy}"
#      https_proxy: "${https_proxy}"
#      HUGGINGFACEHUB_API_TOKEN: "${HUGGINGFACEHUB_API_TOKEN}"
#      HF_HUB_DISABLE_PROGRESS_BARS: 1
#      HF_HUB_ENABLE_HF_TRANSFER: 0
#      command: --model-id "${RERANK_MODEL_ID}" --auto-truncate
#    networks:
#      - opea-network
  ollama-service:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "${LLM_ENDPOINT_PORT:-11434}:11434"
    volumes:
      - "ollama_data:/root/.ollama"
    entrypoint: ["bash", "-c"]
    command: ["ollama serve & sleep 10 && ollama pull ${OLLAMA_MODEL} && ollama run ${OLLAMA_MODEL} & wait"] # Ensure LLM model is pulled at startup
    environment:
      no_proxy: "${no_proxy}"
      https_proxy: "${https_proxy}"
      http_proxy: "${http_proxy}"
      OLLAMA_MODEL: "${OLLAMA_MODEL}"
    networks:
      - opea-network

  chatqna-aipc-backend-server:
    image: "${REGISTRY:-opea}/chatqna:${TAG:-latest}"
    container_name: chatqna-aipc-backend-server
    depends_on:
      - redis-vector-db
      - dataprep-redis-service
      - tei-embedding-service
      - retriever
#      - tei-reranking-service
      - ollama-service
    ports:
      - "${BACKEND_SERVICE_PORT:-8888}:8888"
    environment:
      - no_proxy=${no_proxy}
      - https_proxy=${https_proxy}
      - http_proxy=${http_proxy}
      - MEGA_SERVICE_HOST_IP=chatqna-aipc-backend-server
      - EMBEDDING_SERVER_HOST_IP=tei-embedding-service
      - EMBEDDING_SERVER_PORT=80
      - RETRIEVER_SERVICE_HOST_IP=retriever
#      - RERANK_SERVER_HOST_IP=tei-reranking-service
#      - RERANK_SERVER_PORT=80
      - LLM_SERVER_HOST_IP=ollama-service
      - LLM_SERVER_PORT=11434
      - LLM_MODEL=${OLLAMA_MODEL}
      - LOGFLAG=${LOGFLAG}
    ipc: host
    restart: always
    networks:
      - opea-network

  chatqna-aipc-ui-server:
    image: "${REGISTRY:-opea}/chatqna-ui:${TAG:-latest}"
    container_name: chatqna-aipc-ui-server
    depends_on:
      - chatqna-aipc-backend-server
    ports:
      - "${FRONTEND_SERVICE_PORT:-5173}:5173"
    environment:
      - no_proxy=${no_proxy}
      - https_proxy=${https_proxy}
      - http_proxy=${http_proxy}
    ipc: host
    restart: always
    networks:
      - opea-network

  chatqna-aipc-nginx-server:
    image: "${REGISTRY:-opea}/nginx:${TAG:-latest}"
    container_name: chatqna-aipc-nginx-server
    depends_on:
      - chatqna-aipc-backend-server
      - chatqna-aipc-ui-server
    ports:
      - "${NGINX_PORT:-80}:80"
    environment:
      - no_proxy=${no_proxy}
      - https_proxy=${https_proxy}
      - http_proxy=${http_proxy}
      - FRONTEND_SERVICE_IP=chatqna-aipc-ui-server
      - FRONTEND_SERVICE_PORT=${FRONTEND_SERVICE_PORT}
      - BACKEND_SERVICE_NAME=chatqna
      - BACKEND_SERVICE_IP=chatqna-aipc-backend-server
      - BACKEND_SERVICE_PORT=${BACKEND_SERVICE_PORT}
      - DATAPREP_SERVICE_IP=dataprep-redis-service
      - DATAPREP_SERVICE_PORT=5000 # Internal port of dataprep service
    ipc: host
    restart: always
#    volumes:
#      - nginx_log:/var/log/nginx # Optional: Volume for Nginx logs
    networks:
      - opea-network

#volumes:
#  ollama_data: # Named Volume for Ollama Service
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: /mnt/c/Users/YourName/ollama_data    # Bind mount to a preferred path
#  redis_data: # Named Volume for Redis Service
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: /mnt/c/Users/YourName/redis_data   # Bind mount to a preferred path
#  nginx_log: # Optional: Named Volume for Nginx logs

networks:
  opea-network:
    driver: bridge